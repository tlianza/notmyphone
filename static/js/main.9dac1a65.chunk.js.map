{"version":3,"sources":["Message.js","Notifications.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","setState","console","log","react_default","a","createElement","Fragment","className","onClick","data-toggle","data-target","title","body","lib_default","date","arrivalTime","Modal","onHide","Header","closeButton","Title","Body","name","Footer","Button","variant","React","Component","Notifications","messages","dismissMessage","message","currMessages","i","length","msg","notification_id","notification_tag","splice","addMessage","limit","deleted","shift","concat","toConsumableArray","_this2","websocket","onmessage","evt","JSON","parse","data","type","push","notifications","icon","image_url","Date","map","index","src_Message","key","application_name","REDIRECT_URL","encodeURIComponent","ROOT_URL","Sentry","dsn","MyClock","react_live_clock_lib_default","format","ticking","RefreshButton","window","location","reload","size","handleClick","LoginButton","href","App","reconnectTimeout","connect","debug","ws","wsIsConnected","onmessageFunc","WebSocket","getEventURL","connectInterval","that","onopen","connected","clearTimeout","onclose","e","nextCheckMs","Math","min","reason","setTimeout","check","onerror","err","error","exception","close","readyState","CLOSED","auth","URLSearchParams","search","get","getCookie","getAndCacheAuthKey","App_MyClock","src_Notifications","id","App_LoginButton","App_RefreshButton","cname","ca","decodeURIComponent","document","cookie","split","c","charAt","substring","indexOf","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dac1a65.chunk.js","sourcesContent":["import React from \"react\";\nimport TimeAgo from 'react-timeago';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nclass Message extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        console.log(\"Div clicked\");\n        this.setState({ show: true });\n    }\n\n    render() {\n        //   var imgAttr = { src: \"data:image/jpeg;base64, \" + icon, alt: name, className: \"card-img\"};\n        //   //{icon && <img {...imgAttr} />}\n        return (\n            <>\n                <div className=\"d-flex col\">\n                    <div className=\"card text-white flex-fill\" onClick={this.handleShow} data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n                        <div className=\"card-text\">\n                            <h5>{this.props.title}</h5>\n                            {this.props.body}\n                        </div>\n                        <div className=\"card-footer\">\n                            <small className=\"text-muted\"><TimeAgo date={this.props.arrivalTime} /></small>\n                        </div>\n                    </div>\n                </div>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.props.title}</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>{this.props.body}</p>\n                        <span className=\"text-muted\">From {this.props.name} <TimeAgo date={this.props.arrivalTime} /></span>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.handleClose}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Message;\n","import React, { Component } from 'react'\nimport Message from \"./Message\";\n\nclass Notifications extends Component {\n    state = {\n        messages: [],\n    };\n\n    componentDidMount() {\n        this.props.websocket.onmessage = evt => {\n            // on receiving a message, see if it's a real push and if so add it to\n            // the list of messages\n            const message = JSON.parse(evt.data);\n            if (message.type !== \"push\") { return; } //only respond to pushes\n\n            console.log(\"Event is a push...\")\n            console.log(message);\n\n            //if the push is a dismissal, use it to pull messages off the queue\n            if (message.push.type === \"dismissal\") {\n                this.dismissMessage(message.push);\n                return;\n            }\n\n            //if the message isn't renderable, discard it\n            if (!message.push.body && (!message.push.notifications || message.push.notifications.length === 0)) {\n                console.log(\"Event was not renderable. Ignoring.\");\n                console.log(message.notifications);\n                return;\n            }\n\n            if (message.push.notifications) {\n                if (!message.push.body) {\n                    message.push.body = message.push.notifications[0].body;\n                }\n                if (!message.push.title) {\n                    message.push.title = message.push.notifications[0].title;\n                }\n                if (!message.push.icon) {\n                    message.push.icon = message.push.notifications[0].image_url;\n                }\n            }\n\n            message.push.arrivalTime = new Date();\n            this.addMessage(message.push)\n        }\n    }\n\n    dismissMessage = message => {\n        console.log(\"Asked to dismiss something.\");\n        var currMessages = this.state.messages;\n        for( var i = currMessages.length; i--;) {\n            let msg = currMessages[i];\n            if ( msg.notification_id === message.notification_id && msg.notification_tag === message.notification_tag) {\n                currMessages.splice(i, 1);\n            }\n        }\n        this.setState(state => ({messages: currMessages}));\n    }\n\n    addMessage = message => {\n        if (this.state.messages.length >= this.props.limit) {\n            let deleted = this.state.messages.shift();\n            console.log(\"Shifted a message out: \");\n            console.log(deleted);\n        }\n\n        this.setState(state => ({messages: [message, ...state.messages]}))\n    }\n\n    render() {\n        return (\n            <div className=\"notifications container-fluid\">\n                <div className=\"row\">\n                    {this.state.messages.map((message, index) =>\n                        <Message\n                            key={index}\n                            body={message.body}\n                            title={message.title}\n                            name={message.application_name}\n                            icon={message.icon}\n                            arrivalTime={message.arrivalTime}\n                        />,\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Notifications;","import React, { Component } from 'react'\nimport Notifications from './Notifications'\nimport Clock from 'react-live-clock';\nimport Button from 'react-bootstrap/Button';\nimport * as Sentry from '@sentry/browser';\nimport \"./App.css\"\n\nconst PUSHBULLET_CLIENT_ID = \"yV56z5euFLaZM8byC87MWhq3k9WKmprK\";\nconst ROOT_URL = 'https://notmyphone.com/';\nconst REDIRECT_URL = `https://www.pushbullet.com/authorize?client_id=${PUSHBULLET_CLIENT_ID}&redirect_uri=${encodeURIComponent(ROOT_URL+'auth')}&response_type=code&scope=everything`;\nconst ROOT_EVENT_URL = 'wss://stream.pushbullet.com/websocket/';\nconst NOTIFICATON_LIMIT = 5;\n\nSentry.init({dsn: \"https://d2ff761a0ad0419eb41f284c3daea915@sentry.io/1489499\"});\n\nclass MyClock extends Component {\n  render() {\n    return (\n        <div className=\"clock\">\n          <Clock format={'hh:mm a'} ticking={true}  />\n        </div>\n    )\n  }\n}\n\nclass RefreshButton extends Component {\n  handleClick() {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>&#8635;</Button>\n    )\n  }\n}\n\nclass LoginButton extends Component {\n  handleClick() {\n    window.location.href = REDIRECT_URL;\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>Login</Button>\n    )\n  }\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    let ws = new WebSocket(this.getEventURL());\n    this.state = {\n      ws: ws,\n      connected: false\n    };\n  }\n\n  static getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\n  getAndCacheAuthKey() {\n    const urlParams = new URLSearchParams(window.location.search);\n    let auth = urlParams.get('auth');\n\n    if ((auth === null || auth.length === 0)) {\n      auth = App.getCookie('auth');\n    }\n\n    if ((auth === null || auth.length === 0)) {\n      Sentry.captureMessage(\"No auth found in either param or cookie.\");\n      console.log(\"No auth found in either param or cookie.\");\n      return null;\n    }\n    return auth;\n  }\n\n  // Picks up the event url via auth in the cookie (or querystring if testing locally)\n  getEventURL() {\n    return ROOT_EVENT_URL + this.getAndCacheAuthKey();\n  }\n\n  reconnectTimeout = 250;\n\n  componentDidMount() {\n    if (null != this.getAndCacheAuthKey()) {\n      this.connect();\n    } else {\n      console.log(\"Not attempting to connect, since there's no auth.\");\n    }\n  }\n\n  connect = () => {\n    console.debug(\"Attempting to connect websocket...\");\n\n    // This is hacktackular, but since we already have a websocket from the constructor (probably)\n    // which probably has an event handler attached to it, make sure we don't lose that.\n    const { ws } = this.state;\n    if (this.wsIsConnected()){\n      this.ws = ws; //existing, connected, constructor-created WS\n    } else {\n      //if there is an existing ws, throw it away but keep its onmessage event\n      let onmessageFunc = null;\n      if (ws){\n        onmessageFunc = ws.onmessage;\n      }\n      this.ws = new WebSocket(this.getEventURL());\n      this.ws.onmessage = onmessageFunc;\n    }\n\n    let that = this; // cache the this\n    var connectInterval;\n\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n      this.setState({\n        ws: this.ws,\n        connected: true\n      });\n      that.reconnectTimeout = 250; // reset timer to 250 on open of websocket connection\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    }\n\n    this.ws.onclose = e => {\n      let nextCheckMs = Math.min(10000, that.reconnectTimeout);\n      console.log(\n          `Socket is closed. Reconnect will be attempted in ${nextCheckMs} ms.`,\n          e.reason\n      );\n      this.setState({\n        ws: this.ws,\n        connected: false\n      });\n      that.reconnectTimeout = that.reconnectTimeout + that.reconnectTimeout; //increment retry interval\n      connectInterval = setTimeout(this.check, nextCheckMs); //call check function after timeout\n    }\n\n    // websocket onerror event listener\n    this.ws.onerror = err => {\n      console.error(\n          \"Socket encountered error: \",\n          err.message,\n          \"Closing socket\"\n      );\n      Sentry.captureException(err.exception)\n      that.ws.close();\n    };\n  }\n\n  /**\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\n   */\n  check = () => {\n    console.debug(\"Checking ws state...\");\n    if(!this.wsIsConnected()) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  wsIsConnected = () => {\n    const { ws } = this.state;\n    return (ws && ws.readyState !== WebSocket.CLOSED);\n  };\n\n  render() {\n    return (\n        <div className=\"App container-fluid\">\n          <MyClock/>\n          <Notifications limit={NOTIFICATON_LIMIT} websocket={this.state.ws}/>\n          <div id=\"button-tray\" className=\"fixed-bottom\">\n            <div className=\"float-left\">\n            {\n              this.state.connected\n                  ? null\n                  : <LoginButton />\n            }\n            </div>\n            <div className=\"float-right\">\n              <RefreshButton/>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}