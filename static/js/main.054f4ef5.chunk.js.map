{"version":3,"sources":["Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","setState","console","log","react_default","a","createElement","Fragment","className","onClick","data-toggle","data-target","title","message","lib_default","date","arrivalTime","Modal_default","onHide","Header","closeButton","Title","Body","name","Footer","Button_default","variant","React","Component","REDIRECT_URL","concat","encodeURIComponent","ROOT_URL","NOTIFICATON_LIMIT","Notifications","messages","ws","WebSocket","getEventURL","dismissMessage","currMessages","i","length","msg","notification_id","notification_tag","splice","addMessage","deleted","shift","toConsumableArray","URLSearchParams","window","location","search","get","_this2","onopen","onmessage","evt","JSON","parse","data","type","push","Date","onclose","map","index","src_Message","key","body","application_name","icon","MyClock","react_live_clock_lib_default","format","ticking","RefreshButton","reload","size","handleClick","LoginButton","href","App","App_MyClock","App_Notifications","id","App_LoginButton","App_RefreshButton","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.054f4ef5.chunk.js","sourcesContent":["import React from \"react\";\nimport TimeAgo from 'react-timeago';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nclass Message extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        console.log(\"Div clicked\");\n        this.setState({ show: true });\n    }\n\n    render() {\n        //   var imgAttr = { src: \"data:image/jpeg;base64, \" + icon, alt: name, className: \"card-img\"};\n        //   //{icon && <img {...imgAttr} />}\n        return (\n            <>\n                <div className=\"d-flex col\">\n                    <div className=\"card text-white flex-fill\" onClick={this.handleShow} data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n                        <div className=\"card-text\">\n                            <h5>{this.props.title}</h5>\n                            {this.props.message}\n                        </div>\n                        <div className=\"card-footer\">\n                            <small className=\"text-muted\"><TimeAgo date={this.props.arrivalTime} /></small>\n                        </div>\n                    </div>\n                </div>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.props.title}</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <p>{this.props.message}</p>\n                        <span className=\"text-muted\">From {this.props.name} <TimeAgo date={this.props.arrivalTime} /></span>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.handleClose}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default Message;\n","import React, { Component } from 'react'\nimport Message from './Message'\nimport Clock from 'react-live-clock';\nimport Button from 'react-bootstrap/Button';\nimport \"./App.css\"\n\nconst ROOT_EVENT_URL = 'wss://stream.pushbullet.com/websocket/';\nconst PUSHBULLET_CLIENT_ID = \"yV56z5euFLaZM8byC87MWhq3k9WKmprK\";\nconst ROOT_URL = 'https://notmyphone.com/';\nconst REDIRECT_URL = `https://www.pushbullet.com/authorize?client_id=${PUSHBULLET_CLIENT_ID}&redirect_uri=${encodeURIComponent(ROOT_URL+'auth')}&response_type=code&scope=everything`;\nconst NOTIFICATON_LIMIT = 5;\n\nclass Notifications extends Component {\n  state = {\n    messages: [],\n  };\n\n  // Picks up the event url via auth in the cookie (or querystring if testing locally)\n  getEventURL() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const auth = urlParams.get('auth');\n    return ROOT_EVENT_URL + auth;\n  }\n\n  ws = new WebSocket(this.getEventURL())\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, see if it's a real push and if so add it to \n      // the list of messages\n      const message = JSON.parse(evt.data);\n      if (message.type !== \"push\") { return; } //only respond to pushes\n\n      console.log(\"Event is a push...\")\n      console.log(message);\n\n      //if the push is a dismissal, use it to pull messages off the queue\n      if (message.push.type === \"dismissal\") {\n        this.dismissMessage(message.push);\n        return;\n      }\n\n\n      message.push.arrivalTime = new Date();\n      this.addMessage(message.push)\n    }\n\n    this.ws.onclose = () => {\n      console.log('websocket disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(this.getEventURL()),\n      })\n    }\n  }\n\n  dismissMessage = message => {\n    console.log(\"Asked to dismiss something.\");\n    var currMessages = this.state.messages;\n    for( var i = currMessages.length; i--;) {\n      let msg = currMessages[i];\n      if ( msg.notification_id === message.notification_id && msg.notification_tag === message.notification_tag) {\n        currMessages.splice(i, 1);\n      }\n    }\n    this.setState(state => ({messages: currMessages}));\n  }\n\n  addMessage = message => {\n    if (this.state.messages.length >= NOTIFICATON_LIMIT) {\n      let deleted = this.state.messages.shift();\n      console.log(\"Shifted a message out: \");\n      console.log(deleted);\n    }\n\n    this.setState(state => ({messages: [message, ...state.messages]}))\n  }\n\n  render() {\n    return (\n      <div className=\"notifications container-fluid\">\n        <div className=\"row\">\n        {this.state.messages.map((message, index) =>\n          <Message\n            key={index}\n            message={message.body}\n            title={message.title}\n            name={message.application_name}\n            icon={message.icon}\n            arrivalTime={message.arrivalTime}\n          />,\n        )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass MyClock extends Component {\n  render() {\n    return (\n        <div className=\"clock\">\n          <Clock format={'hh:mm a'} ticking={true}  />\n        </div>\n    )\n  }\n}\n\nclass RefreshButton extends Component {\n  handleClick() {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>&#8635;</Button>\n    )\n  }\n}\n\nclass LoginButton extends Component {\n  handleClick() {\n    window.location.href = REDIRECT_URL;\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>Login</Button>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n        <MyClock />\n        <Notifications />\n        <div id=\"button-tray\" className=\"fixed-bottom\">\n          <LoginButton />&nbsp;\n          <RefreshButton />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}