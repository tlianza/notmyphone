{"version":3,"sources":["Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","_ref","name","message","arrivalTime","icon","react_default","a","createElement","className","lib_default","date","REDIRECT_URL","concat","encodeURIComponent","ROOT_URL","NOTIFICATON_LIMIT","Notifications","state","messages","ws","WebSocket","_this","getEventURL","dismissMessage","console","log","currMessages","i","length","msg","notification_id","notification_tag","splice","setState","addMessage","deleted","shift","Object","toConsumableArray","URLSearchParams","window","location","search","get","_this2","this","onopen","onmessage","evt","JSON","parse","data","type","push","Date","onclose","map","index","key","body","application_name","Component","Clock","$el","$","el","FlipClock","face","showSeconds","start","_this3","ref","RefreshButton","reload","Button_default","variant","size","onClick","handleClick","LoginButton","href","App","App_Clock","App_Notifications","id","class","App_LoginButton","App_RefreshButton","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74bc26a9.chunk.js","sourcesContent":["import React from \"react\";\nimport TimeAgo from 'react-timeago';\n\nexport default ({ name, message, icon, arrivalTime }) => {\n  var imgAttr = { src: \"data:image/jpeg;base64, \" + icon, alt: name, className: \"card-img\"};\n  //{icon && <img {...imgAttr} />}\n  return (\n      <div className=\"card text-white\">\n          <div className=\"card-text\">\n              <h5>{name}</h5>\n              {message}\n          </div>\n          <div className=\"card-footer\">\n              <small className=\"text-muted\"><TimeAgo date={arrivalTime} /></small>\n          </div>\n      </div>\n  );\n};\n","import React, { Component } from 'react'\nimport Message from './Message'\nimport FlipClock from 'flipclock';\nimport Button from 'react-bootstrap/Button';\nimport $ from 'jquery'; \nimport \"./App.css\"\n\nconst ROOT_EVENT_URL = 'wss://stream.pushbullet.com/websocket/';\nconst PUSHBULLET_CLIENT_ID = \"yV56z5euFLaZM8byC87MWhq3k9WKmprK\";\nconst ROOT_URL = 'https://notmyphone.com/';\nconst REDIRECT_URL = `https://www.pushbullet.com/authorize?client_id=${PUSHBULLET_CLIENT_ID}&redirect_uri=${encodeURIComponent(ROOT_URL+'auth')}&response_type=code&scope=everything`;\nconst NOTIFICATON_LIMIT = 5;\n\nclass Notifications extends Component {\n  state = {\n    messages: [],\n  };\n\n  // Picks up the event url via auth in the cookie (or querystring if testing locally)\n  getEventURL() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const auth = urlParams.get('auth');\n    return ROOT_EVENT_URL + auth;\n  }\n\n  ws = new WebSocket(this.getEventURL())\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, see if it's a real push and if so add it to \n      // the list of messages\n      const message = JSON.parse(evt.data);\n      if (message.type !== \"push\") { return; } //only respond to pushes\n\n      console.log(\"Event is a push...\")\n      console.log(message);\n\n      //if the push is a dismissal, use it to pull messages off the queue\n      if (message.push.type === \"dismissal\") {\n        this.dismissMessage(message.push);\n        return;\n      }\n\n\n      message.push.arrivalTime = new Date();\n      this.addMessage(message.push)\n    }\n\n    this.ws.onclose = () => {\n      console.log('websocket disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(this.getEventURL()),\n      })\n    }\n  }\n\n  dismissMessage = message => {\n    console.log(\"Asked to dismiss something.\");\n    var currMessages = this.state.messages;\n    for( var i = currMessages.length; i--;) {\n      let msg = currMessages[i];\n      if ( msg.notification_id === message.notification_id && msg.notification_tag === message.notification_tag) {\n        currMessages.splice(i, 1);\n      }\n    }\n    this.setState(state => ({messages: currMessages}));\n  }\n\n  addMessage = message => {\n    if (this.state.messages.length >= NOTIFICATON_LIMIT) {\n      let deleted = this.state.messages.shift();\n      console.log(\"Shifted a message out: \");\n      console.log(deleted);\n    }\n\n    this.setState(state => ({messages: [message, ...state.messages]}))\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"notifications card-deck\">\n        {this.state.messages.map((message, index) =>\n          <Message\n            key={index}\n            message={message.body}\n            name={message.application_name}\n            icon={message.icon}\n            arrivalTime={message.arrivalTime}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nclass Clock extends Component {\n\n  componentDidMount() {\n    this.$el = $(this.el);\n    const clock = new FlipClock(this.el, {\n       face: 'TwelveHourClock',\n       showSeconds: false\n    });\n    clock.start();\n  }\n\n  componentWillUnmount() {\n    //this.$el.somePlugin('destroy');\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"clock\" ref={el => this.el = el}></div>\n      </div>\n    )\n  }\n}\n\nclass RefreshButton extends Component {\n  handleClick() {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>&#8635;</Button>\n    )\n  }\n}\n\nclass LoginButton extends Component {\n  handleClick() {\n    window.location.href = REDIRECT_URL;\n  }\n\n  render() {\n    return (\n        <Button variant=\"light\" size=\"sm\" onClick={this.handleClick}>Login</Button>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n        <Clock />\n        <Notifications />\n        <div id=\"button-tray\" class=\"fixed-bottom\">\n          <LoginButton />&nbsp;\n          <RefreshButton />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"flipclock/dist/flipclock.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}