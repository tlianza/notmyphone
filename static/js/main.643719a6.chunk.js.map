{"version":3,"sources":["Message.js","App.js","serviceWorker.js","index.js"],"names":["Message","_ref","name","message","icon","imgAttr","src","alt","react_default","a","createElement","EVENT_URL","Chat","state","messages","ws","WebSocket","addMessage","_this","setState","concat","Object","toConsumableArray","_this2","this","onopen","console","log","onmessage","evt","JSON","parse","data","type","push","onclose","map","index","key","body","application_name","Component","App","className","href","rel","App_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEeA,EAAA,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,KAC3BC,EAAU,CAAEC,IAAK,2BAA6BF,EAAMG,IAAKL,GAC7D,OACEM,EAAAC,EAAAC,cAAA,SACGN,GAAQI,EAAAC,EAAAC,cAAA,MAASL,GAClBG,EAAAC,EAAAC,cAAA,cAASR,GAFX,IAE0BM,EAAAC,EAAAC,cAAA,UAAKP,KCF7BQ,SAAY,0CAGZC,6MACJC,MAAQ,CACNC,SAAU,MAGZC,GAAK,IAAIC,UAAUL,KA2BnBM,WAAa,SAAAd,GAAO,OAClBe,EAAKC,SAAS,SAAAN,GAAK,MAAK,CAAEC,SAAQ,CAAGX,GAAHiB,OAAAC,OAAAC,EAAA,EAAAD,CAAeR,EAAMC,kGA1BrC,IAAAS,EAAAC,KAClBA,KAAKT,GAAGU,OAAS,WAEfC,QAAQC,IAAI,cAGdH,KAAKT,GAAGa,UAAY,SAAAC,GAGlB,IAAM1B,EAAU2B,KAAKC,MAAMF,EAAIG,MACV,SAAjB7B,EAAQ8B,OACZP,QAAQC,IAAI,sBACZD,QAAQC,IAAIxB,GACZoB,EAAKN,WAAWd,EAAQ+B,QAG1BV,KAAKT,GAAGoB,QAAU,WAChBT,QAAQC,IAAI,gBAEZJ,EAAKJ,SAAS,CACZJ,GAAI,IAAIC,UAAUL,uCAWtB,OACEH,EAAAC,EAAAC,cAAA,WACGc,KAAKX,MAAMC,SAASsB,IAAI,SAACjC,EAASkC,GAAV,OACvB7B,EAAAC,EAAAC,cAACV,EAAD,CACEsC,IAAKD,EACLlC,QAASA,EAAQoC,KACjBrC,KAAMC,EAAQqC,iBACdpC,KAAMD,EAAQC,iBA7CPqC,aAoEJC,MAff,WACE,OACElC,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,OACXnC,EAAAC,EAAAC,cAAA,KACEkC,KAAK,mLACLC,IAAI,uBAFN,oBAMFrC,EAAAC,EAAAC,cAACoC,EAAD,QC1DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.643719a6.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ name, message, icon }) => {\n  var imgAttr = { src: \"data:image/jpeg;base64, \" + icon, alt: name };\n  return (\n    <p>\n      {icon && <img {...imgAttr} />}\n      <strong>{name}</strong> <em>{message}</em>\n    </p>\n  );\n};\n","import React, { Component } from 'react'\nimport Message from './Message'\nimport \"./App.css\";\n\nconst AUTH_KEY = '';\nconst EVENT_URL = 'wss://stream.pushbullet.com/websocket/'+AUTH_KEY;\n\n\nclass Chat extends Component {\n  state = {\n    messages: [],\n  }\n\n  ws = new WebSocket(EVENT_URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, see if it's a real push and if so add it to \n      // the list of messages\n      const message = JSON.parse(evt.data);\n      if (message.type !== \"push\") { return; } //only respond to pushes\n      console.log(\"Event is a push...\")\n      console.log(message);\n      this.addMessage(message.push)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(EVENT_URL),\n      })\n    }\n  }\n\n  addMessage = message => \n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  \n\n  render() {\n    return (\n      <div>\n        {this.state.messages.map((message, index) =>\n          <Message\n            key={index}\n            message={message.body}\n            name={message.application_name}\n            icon={message.icon}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <a\n          href=\"https://www.pushbullet.com/authorize?client_id=yV56z5euFLaZM8byC87MWhq3k9WKmprK&redirect_uri=https%3A%2F%2Fpiclock.lianza.workers.dev%2Fauth&response_type=code&scope=everything\"\n          rel=\"noopener noreferrer\"\n        >\n          Pushbullet Login\n        </a>\n      <Chat />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}